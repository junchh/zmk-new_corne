#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt { tapping-term-ms = <150>; };

&lt { tapping-term-ms = <150>; };

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "ABC";
            bindings = <
&none  &kp Q  &kp W  &kp E       &kp R      &kp T                                      &kp UP                &kp Y      &kp U        &kp I            &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D       &kp F      &kp G                            &kp LEFT  &kp ENTER  &kp RIGHT  &kp H      &kp J        &kp K            &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C       &kp V      &kp B               &kp SPACE              &kp DOWN              &kp N      &kp M        &kp COMMA        &kp DOT  &kp FSLH  &none
                     &kp ESCAPE  &lt 1 TAB  &mt LCMD BACKSPACE                                               &kp SPACE  &lt 2 ENTER  &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "SYM";
            bindings = <
&none  &kp N1           &kp N2         &kp N3        &kp N4                &kp N5                                               &mmv MOVE_UP                     &kp N6            &kp N7             &kp N8            &kp N9             &kp N0     &none
&none  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH      &kp DOLLAR            &kp PERCENT                          &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp UNDERSCORE    &kp MINUS          &kp PLUS   &none
&none  &kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL  &none
                                       &none         &mo 1                 &none                                                                                 &kp HOME          &kp END            &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        NAV {
            bindings = <
&none  &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &kp LA(NUMBER_4)  &kp LA(NUMBER_5)                     &trans          &kp LA(NUMBER_6)  &kp LA(NUMBER_7)  &kp LA(NUMBER_8)  &kp LA(NUMBER_9)  &kp LA(NUMBER_0)          &none
&none  &kp GRAVE         &kp TILDE         &kp BACKSLASH     &kp PIPE          &none                        &trans  &trans  &trans  &kp LEFT          &kp DOWN          &kp UP            &kp RIGHT         &kp LS(LG(NUMBER_4))      &none
&none  &kp LESS_THAN     &kp GREATER_THAN  &kp QUESTION      &kp COLON         &none              &trans            &trans          &kp LC(C)         &kp LC(D)         &kp LC(U)         &none             &kp LS(LC(LG(NUMBER_4)))  &none
                                           &mo 3             &kp LEFT_SHIFT    &kp LC(BACKSPACE)                                    &none             &mo 2             &none
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp LA(Q)  &kp LA(W)  &kp LA(E)  &kp LA(R)  &kp LA(T)                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans               &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans     &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                              &trans     &trans     &trans                                       &trans  &trans  &trans
            >;
        };
    };
};
